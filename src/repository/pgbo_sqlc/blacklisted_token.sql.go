// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: blacklisted_token.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getBlacklistedToken = `-- name: GetBlacklistedToken :one
SELECT 
    b.token,
    b.type,
    b.created_at
FROM 
    blacklisted_token b
WHERE
    b.token = $1
LIMIT 1
`

func (q *Queries) GetBlacklistedToken(ctx context.Context, token sql.NullString) (BlacklistedToken, error) {
	row := q.db.QueryRowContext(ctx, getBlacklistedToken, token)
	var i BlacklistedToken
	err := row.Scan(&i.Token, &i.Type, &i.CreatedAt)
	return i, err
}

const insertBlacklistedToken = `-- name: InsertBlacklistedToken :one
INSERT INTO blacklisted_token(
	token, type)
	VALUES ($1, $2)
RETURNING blacklisted_token.token, blacklisted_token.type, blacklisted_token.created_at
`

type InsertBlacklistedTokenParams struct {
	Token sql.NullString `json:"token"`
	Type  sql.NullString `json:"type"`
}

func (q *Queries) InsertBlacklistedToken(ctx context.Context, arg InsertBlacklistedTokenParams) (BlacklistedToken, error) {
	row := q.db.QueryRowContext(ctx, insertBlacklistedToken, arg.Token, arg.Type)
	var i BlacklistedToken
	err := row.Scan(&i.Token, &i.Type, &i.CreatedAt)
	return i, err
}
